//*******************************************************************
/// @file   MAIN.cpp
/// @brief  BeeIoT - Main file
/// @author MchResse
/// @date   2021-02-15
/// @details
// from Project https://github.com/mchresse/BeeIoT
//
// Description:
// Contains main setup() and loop() routines for esspressif32 platforms.
//
//----------------------------------------------------------
// Copyright (c) 2019-present, Randolph Esser
// All rights reserved.
// This file is distributed under the BSD-3-Clause License
// The complete license agreement can be obtained at:
//     https://github.com/mchresse/BeeIoT/license
// For used 3rd party open source see also Readme_OpenSource.txt
//*******************************************************************
//
// This Module contains code derived from
// - The "espressif/arduino-esp32/preferences" library,
//   distributed under the Apache License, Version 2.0
// - MQTT Library distributed under the MIT-License:
//   https://opensource.org/licenses/mit-license.php
// -
//
//
//*******************************************************************
// BeeIoT Local Libraries
//*******************************************************************
// For ESP32-DevKitC PIN Configuration look at BeeIoT.h


#include <Arduino.h>
#include <stdio.h>
#include "sys/types.h"
#include <iostream>
#include <string>
// #include <esp_log.h>
// from Espressif Systems IDF: https://github.com/espressif/esp-idf/tree/71b4768df8091a6e6d6ad3b5c2f09a058f271348/components/log
#include "soc/efuse_reg.h"
#include <esp_efuse.h>

//#include "sdkconfig.h"   // generated from Arduino IDE
#include <Preferences.h> // from espressif-esp32 library @ GitHub
// see https://github.com/espressif/arduino-esp32/blob/master/libraries/Preferences/examples/StartCounter/StartCounter.ino

#include <driver/gpio.h>
#include <driver/rtc_io.h>
#include <esp_sleep.h>

#include "version.h"	// version file generated by buildscript_versioning.py script in project folder at build

// Libraries for SD card at ESP32_
// ...has support for FAT32 support with long filenames
#include <SPI.h>        // from Arduino IDE
#include <FS.h>         // from Arduino IDE
#include <SD.h>         // from Arduino IDE
#include "sdcard.h"

// Libs for WaveShare ePaper 2.7 inch r/w/b Pinning GxGDEW027C44
#include <GxEPD.h>                      // from ZinggJM/GxEPD (https://github.com/ZinggJM/GxEPD)
// #include <GxGDEW027C44/GxGDEW027C44.h> // 2.7" b/w/r
#include <GxGDEW027W3/GxGDEW027W3.h>     // 2.7" b/w
#include "BitmapWaveShare.h"            // from WaveShare -> FreeWare

// FreeFonts from Adafruit_GFX          // from adafruit / Adafruit-GFX-Library  (BSD license)
#include <Fonts/FreeMonoBold9pt7b.h>
#include <Fonts/FreeMonoBold12pt7b.h>
//#include <Fonts/FreeMonoBold18pt7b.h>
//#include <Fonts/FreeMonoBold24pt7b.h>
//#include <Fonts/FreeSansBold24pt7b.h>

// DS18B20 libraries
#include <OneWire.h>            // from PaulStoffregen/OneWire library @ GitHub
#include <DallasTemperature.h>  // LGPL v2.1
#include "owbus.h"

// Espressif I2C Library
#include <driver/i2c.h>         // from esp-idf/components/driver/I2C.h library @ GitHub
#include "i2cdev.h"				// I2C master Port setup

// ESP32-ADC
#include "espadc.h"

// Libraries for WIFI & to get time from NTP Server
#include <WiFi.h>               // from espressif-esp32 library @ GitHub
#include "wificfg.h"            // local
#include "esp_wifi.h"
#include "RTClib.h"             // from by JeeLabs adafruit /RTClib library @ GitHub

// include TCP Client library
#include "TCPClient.h"          // local

// include MQTT Client library
#include <MQTTClient.h>         // local

// Library fo HX711 Access
#include <HX711.h>              // HX711 library for Arduino (https://github.com/bogde/HX711)
#include "HX711Scale.h"         // local

#include <LoRa.h>       // Lora Lib from SanDeep (https://github.com/sandeepmistry/arduino-LoRa)
#include "BeeIoTWan.h"
#include "beelora.h"            // local: Lora Radio settings and BeeIoT WAN protocol definitions
#include "beeiot.h"             // local: provides all GPIO PIN configurations of all sensor Ports !

//************************************
// Global data object declarations
//************************************

#define LOOPTIME    60		// [sec] Loop wait time: 60 for 1 Minute
#define SLEEPTIME   60		// RTC sleep time in seconds
#ifdef BEACON
#define SLEEPMODE	  BEACONSLEEP  // =0 initial startup needed(after reset); =1 after deep sleep;
								   // =2 after light sleep; =3 ModemSleep Mode; =4 Active Wait Loop
#else
#define SLEEPMODE	  1 		// =0 initial startup needed(after reset); =1 after deep sleep; =2 after light sleep;
							    // =3 ModemSleep Mode; =4 Active Wait Loop
#endif

// WakeUp Source control
bool GetData = 0;				// =1 manual trigger by ISR (blue key) to start next measurement
RTC_DATA_ATTR int ReEntry = 0;	// =0 initial startup needed(after reset);   =1 after deep sleep;
								// =2 after light sleep; =3 ModemSleep Mode; =4 Active Wait Loop
RTC_DATA_ATTR int bootCount = 0;    // Deep Sleep Boot Counter

// Define deep sleep options
#define uS_TO_S_FACTOR  1000000LL  // Conversion factor for micro seconds to seconds
#define uS_TO_mS_FACTOR    1000LL  // Conversion factor for micro seconds to milli seconds
int TIME_TO_SLEEP	= SLEEPTIME;   // RTC sleep in seconds

// Central Database of all measured values and runtime parameters
RTC_DATA_ATTR dataset		bhdb;
Preferences preferences;        // we must generate this object of the preference library

extern int iswifi;              // =1 WIFI flag o.k.
extern int isi2c;				// =1 I2C Master Port initialized
extern int isrtc;               // =1 RTC device discovered and time read
extern int isadc;				// >0 => Addr of I2C ADC dev connected
extern int isntp;               // =1 bhdb has latest timestamp
extern int issdcard;            // =1 SDCard found flag o.k.
extern int isepd;               // =1 ePaper found
extern int islora;              // =1 LoRa client is active

extern GxEPD_Class  display;    // ePaper instance from MultiSPI Module
extern HX711        scale;      // managed in HX711Scale module
extern i2c_port_t 	i2c_master_port;	// I2C Master Port in i2cdev.cpp
extern int 			adcaddr;	// I2C Dev.address of detected ADC

// LoRa protocol frequence parameter
long lastSendTime = 0;			// last send time
RTC_DATA_ATTR uint32_t  report_interval = LOOPTIME; // initial interval between BIoT Reports; can be overwritten by CONFIG
char LoRaBuffer[256];			// buffer for LoRa Packages

// construct the object attTCPClient of class TCPClient
TCPClient attTCPClient = TCPClient();


// construct the instance attMQTTClient of class MQTTClient -> not used yet
MQTTClient attMQTTClient = MQTTClient();
byte MQTTClient_Connected;
byte CounterForMQTT;

// 8 configuration values max managed by webpage  -> not used yet
#define CONFIGSETS    8
String ConfigName[CONFIGSETS];     // name of the configuration value
String ConfigValue[CONFIGSETS];    // the value itself (String)
int    ConfigStatus[CONFIGSETS];   // status of the value    0 = not set    1 = valid   -1 = not valid
int    ConfigType[CONFIGSETS];     // type of the value    0 = not set    1 = String (textbox)   2 = Byte (slider)

extern String WebRequestHostAddress;     // global variable used to store Server IP-Address of HTTP-Request
extern byte   RouterNetworkDeviceState;

//************************************
// Global function declarations
//************************************
void showFont(const char name[], const GFXfont* f);
void showFontCallback(void);
void showPartialUpdate(float data);
void ProcessAndValidateConfigValues(int countValues);
void InitConfig(int mode);
void prepare_sleep_mode(int mode, uint64_t waittime);
esp_sleep_wakeup_cause_t print_wakeup_reason();
void CheckWebPage();
void BeeIoTSleep(void);
void biot_ioshutdown(int sleepmode);
void get_efuse_ident(void);
void wiretest();
void ResetNode(uint8_t p1, uint8_t p2, uint8_t p3);

extern int sd_reset(uint8_t sdlevel);
extern void hexdump(unsigned char * msg, int len);


//*******************************************************************
/// @brief BeeIoT Setup Routine - Probe for all expected IO/Sensor devices
/// Detect and check functionality incl. test output where applicable
/// IO ports will be enabled depending on the wakeup mode.
/// @param none
/// @return void
//*******************************************************************
// Define Log level (search for Log values in beeiot.h)
// lflags = LOGBH + LOGOW + LOGHX + LOGLAN + LOGEPD + LOGSD + LOGADS + LOGSPI + LOGLORAR + LOGLORAW;
RTC_DATA_ATTR uint32_t lflags=LOGBH;
//	lflags = 65535;
// works only in setup phase till LoRa-JOIN received Cfg data
// final value will be defined in BeeIoTParseCfg() by GW config data

void setup() {
int rc;		// generic return code variable

  // put your setup code here, to run once:
    gpio_deep_sleep_hold_dis();
	pinMode(LED_RED,   OUTPUT);
	digitalWrite(LED_RED, LOW); // signal Setup Phase
	gpio_hold_dis(LED_RED);   	// enable SD_CS
	pinMode(EPD_CS, OUTPUT);    //VSPI SS for ePaper EPD
    pinMode(SD_CS,  OUTPUT);    //HSPI SS for SDCard Port
    pinMode(BEE_CS, OUTPUT);
    digitalWrite(EPD_CS, HIGH);
    digitalWrite(SD_CS, HIGH);
    digitalWrite(BEE_CS, HIGH);
    gpio_hold_dis(SD_CS);   	// enable SD_CS
    gpio_hold_dis(EPD_CS);   	// enable EPD_CS
    gpio_hold_dis(BEE_CS);  	// enable BEE_CS

//	mydelay2(500); 				//delay nicht entfernen wg Wakeup mode !

  // If Ser. Diagnostic Port connected
	while(!Serial);             // wait to connect UART to computer terminal
	Serial.begin(115200);       // enable Ser. Monitor Baud rate

 //  wiretest();                // for HW incompatibility tests og GPIOs

//***************************************************************
  //Print the wakeup reason for ESP32
  	BHLOG(LOGBH) Serial.printf("Main: BootCnt: %i - ReportInterval %i\n", bootCount, report_interval);
	rc = print_wakeup_reason();
	if(rc != ESP_SLEEP_WAKEUP_UNDEFINED){ // DeepSleep WakeUp Reason
      //  		BHLOG(LOGBH)Serial.printf("Main: DeepSleep Wakup (%i)\n", rc);
  		if(rc == ESP_SLEEP_WAKEUP_TIMER){
			// increment WakeUp boot counter and check if loop wait time reached -> if not: sleep again
			if(++bootCount < (report_interval/TIME_TO_SLEEP)){  // needed in case looptime exceed std. sleep time
				// Start deep sleep again -> split in chunks of sleep windows
        // if deep sleep time == report_interval no boot counter needed:
        //				prepare_sleep_mode(ReEntry, report_interval);
			}
		}
		// ReEntry > 1 <predefined startup/sleep mode set at end of Loop()>
		// 		=1 after deep sleep:  Reset MM -> wakeup with setup()
		// 		=2 after light sleep: keeps MM alive -> wakeup where sleep was called
		// 		=3 after ModemSleep Mode; ( not used here)
		// 		=4 Active Wait Loop (just a busy loop with delay())
	} else {
	  ReEntry = 0;	// reset was pressed or PwrCycle -> set initial StartupState for setup action
		// Nexus of StartupMode set at end of a each loop()
	}

	// ReEntry mode was defined at start of sleep mode (end of loop) already
	// wakeup by Reset -> start initial setup code and reset counter anyway
	bootCount = 0;

//***************************************************************
// Print welcome text
	if(!ReEntry) { // only at new POn cycle once
		if(lflags > 0){
			Serial.println();
			Serial.println(">***********************************<");
			Serial.printf ("> BeeIoT - BeeHive Weight Scale %s", VERSION_SHORT);
			Serial.println("> by R.Esser (c) 2020-2022");
			Serial.println(">***********************************<");
		}
		BHLOG(LOGBH) Serial.printf ("LogLevel: %i\n", lflags);

		//***************************************************************
		// get bhdb.BoardID (=WiFI MAC), .ChipID and .ChipREV from eFuse area
		get_efuse_ident();
	}

BHLOG(LOGBH) Serial.println("Start Sensor Setup Phase:");

//***************************************************************
// Preset BeeIoT runtime config values
  BHLOG(LOGBH) Serial.println("  Setup: Init runtime config settings");
  InitConfig(ReEntry);

//***************************************************************
// I2C_master() has to be started always before setup_rtc() and setup_i2c_ADC/MAX()
  BHLOG(LOGBH) Serial.println("  Setup: I2C Master Device Port Init & Scan");
  isi2c = setup_i2c_master(ReEntry);
  if (!isi2c){
    BHLOG(LOGBH) Serial.println("         I2c Master port failed ");
    // enter here exit code, if needed
  }

//***************************************************************
	BHLOG(LOGBH) Serial.println("  Setup: Init RTC Module DS3231 ");
		if (!setup_rtc(ReEntry)){
			BHLOG(LOGBH) Serial.println("         RTC setup failed");
			// enter exit code here, if needed (monitoring is hard without correct timestamp)
			// isrtc should be 0 here; hopefully NTP can help out later on
		}else{
			BHLOG(LOGLAN) rtc_test();
//			while(1){
//				digitalWrite(LED_RED, LOW);
			getRTCtime();
//				digitalWrite(LED_RED, HIGH);
//				delay(10);
//			}
		}

//***************************************************************
  BHLOG(LOGBH) Serial.println("  Setup: SPI Devices");
  issdcard = setup_spi_VSPI(ReEntry);
  if (!issdcard){
    BHLOG(LOGBH) Serial.println("         SPI SD setup: SD not detected");
    // enter here exit code, if needed
  }

//***************************************************************
  BHLOG(LOGBH) Serial.println("  Setup: HX711 Weight Cell");
  if (!setup_hx711Scale(ReEntry)){
    BHLOG(LOGBH) Serial.println("         HX711 setup failed");
    // enter here exit code, if needed
  }

//***************************************************************
if(isadc){	// I2C Master Port active + ADC detected ?
// only one ADC dev. type accepted -> as set by adcaddr in i2c_scan()
  	BHLOG(LOGBH) Serial.println("  Setup: ADC ADS11x5");
	if (!setup_i2c_ADS(ReEntry)){
    	BHLOG(LOGBH) Serial.println("         ADS11x5 setup failed");
    	// enter here exit code, if needed
	}
	//***************************************************************
	BHLOG(LOGBH) Serial.println("  Setup: ADC MAX123x");
	if (!setup_i2c_MAX(ReEntry)){  // MAX123x constructor
  		BHLOG(LOGBH) Serial.println("         MAX123x setup failed");
   		// enter here exit code, if needed
	}
}


//***************************************************************
// setup Wifi & NTP & RTC time & Web service
  BHLOG(LOGBH) Serial.println("  Setup: Wifi in Station Mode");
  if (!setup_wifi(ReEntry)){
    BHLOG(LOGBH) Serial.println("         Wifi setup failed -> Skip NTP");
    // enter exit code here, if needed
    // probably we are LOOPTIME ahead ?!
    // recalc bhdb "timestamp+LOOPTIME"  here
  }else{  // WIFI connected
    if (!setup_ntp(ReEntry)){
      BHLOG(LOGBH) Serial.println("         NTP setup failed");
      isntp = 0;
      // enter exit code here, if needed
      // NTP requires connected WIFI ! -> check iswifi also
    }else{
      BHLOG(LOGLAN) Serial.println("  Setup: Get new Date & Time:");
      rc = ntp2rtc();
	  if(rc <0){       // init RTC time once at restart
      	BHLOG(LOGLAN) Serial.printf("         ntp2rtc failed (%i)", rc);
	  }
    }

// start the webserver to listen for request of clients (in LAN or own ESP32 network)
//    BHLOG(LOGBH) Serial.println("  Setup: Start Webserver");
//    Webserver_Start();
  }

  getTimeStamp();  // get curr. time either by NTP or RTC -> update bhdb

//***************************************************************
  BHLOG(LOGBH) Serial.println("  Setup: SD Card");
  if((issdcard) && (bhdb.hwconfig & HC_SDCARD)){
    if (!setup_sd(ReEntry)){
      BHLOG(LOGBH) Serial.println("  SD: SD Card failed");
      // enter exit code here, if needed
    }
  }

//***************************************************************
  BHLOG(LOGBH) Serial.println("  Setup: LoRa SPI device & Base layer");
  if (!setup_LoRa(ReEntry)){
    BHLOG(LOGBH) Serial.println("         LoRa Base layer setup failed");
    // enter exit code here, if needed
  }


//***************************************************************
  BHLOG(LOGBH) Serial.println("  Setup: OneWire Bus setup");
  if (setup_owbus(ReEntry) == 0){
    BHLOG(LOGBH) Serial.println("         No OneWire devices found");
    // enter exit code here, if needed
  }else{
    // GetOWsensor(0); // read temperature the first time
  }
//***************************************************************
  BHLOG(LOGBH)Serial.println("  Setup: ePaper + show start frame ");
  if (!setup_epd(ReEntry)){
    BHLOG(LOGBH)Serial.println("         ePaper Test failed");
    // enter exit code here, if needed
  }

//***************************************************************
  Serial.println("");

} // end of BeeIoT setup()



//*******************************************************************
/// @brief  BeeIoT Main Routine: Loop() as endless loop
/// @param none
//*******************************************************************
void loop() {

  digitalWrite(LED_RED, HIGH);  // show start of new loop() phase
//***************************************************************
// get current time to bhdb
  if(getTimeStamp() == -2){   // no valid time source found
    strncpy(bhdb.dlog[bhdb.loopid].timeStamp, "0000-00-00 00:00:00", LENTMSTAMP);
  }else{
    // store curr. timstamp for next data row
    sprintf(bhdb.dlog[bhdb.loopid].timeStamp, "%s %s", bhdb.date, bhdb.time);
  }

  BHLOG(LOGBH) Serial.println(">************************************************<");
  BHLOG(LOGBH) Serial.println("> Start next BeeIoT Weight Scale loop");
  BHLOG(LOGBH) Serial.printf ("> Loop# %i  (Laps: %i, BHDB[%i]) %s\n\n",
		bhdb.loopid + (bhdb.laps*datasetsize), bhdb.laps, bhdb.loopid, bhdb.dlog[bhdb.loopid].timeStamp);

  bhdb.dlog[bhdb.loopid].index = bhdb.loopid + (bhdb.laps*datasetsize);
  sprintf(bhdb.dlog[bhdb.loopid].comment, "o.k.  ");

//
//***************************************************************
// get Weight Scale values
#ifdef HX711_CONFIG
  float weight;
  scale.power_up();  // HX711 WakeUp Device

  // Acquire raw reading
  // weight = HX711_read(0);
  // BHLOG(LOGHX) Serial.printf("  Loop: Weight(raw) : %d", (u_int) weight);

  // Acquire unit reading
  weight = HX711_read(1);	// get it in 10 Gr. steps
  BHLOG(LOGHX) Serial.printf(" - Weight(unit): %.3f kg\n", weight);
  bhdb.dlog[bhdb.loopid].HiveWeight = weight;

  scale.power_down();
#endif // HX711_CONFIG

//***************************************************************
// Scan OW Temp. Sensors
#ifdef ONEWIRE_CONFIG

	// Get all temp values directly into bhdb.dlog[]
	int owsensors = GetOWsensor(bhdb.loopid);

    if(owsensors == 0){	// expected # of sensor data not found ?
		    // check if value of last of all 3 sensors is in range
		    int retry=0;
		    while(	(bhdb.dlog[bhdb.loopid].TempIntern <= -98) ||
				    (bhdb.dlog[bhdb.loopid].TempExtern <= -98) ||
				    (bhdb.dlog[bhdb.loopid].TempHive   <= -98))
        	{  // if we have just started lets do it again to get right values
				GetOWsensor(bhdb.loopid);   // Get all temp values directly into bhdb
				mydelay2(200,0);			// sleep 200ms for OW bus recovery
				if (retry++ == ONE_WIRE_RETRY){
					BHLOG(LOGOW) Serial.printf("  OWBus: No valid Temp-data after %i retries\n", retry);
					break;
				}
		    }
		    if(retry > 0)
			      sprintf(bhdb.dlog[bhdb.loopid].comment, "OW-%ix", retry);
		    BHLOG(LOGBH) Serial.printf("  OWBus: No Temp Sensor Data found!\n");
    }else{
		BHLOG(LOGOW) Serial.printf("  OWBus: %i Temp Sensor Data retrieved\n", owsensors);
	}

#endif // ONEWIRE_CONFIG

//***************************************************************
// Monitor Analog Ports: e.g. of battery Control

// Read Analog Ports via internal ESP32-ADC
  // read out all Aanalog channels:
	BHLOG(LOGADS) Serial.print("  Loop: Get ADC Ports: Charge=");
	uint32_t addata = 0;   		// raw ADS Data buffer

	// Read Charging Power in Volt
	addata=getespadc(Charge_pin)  * 311 / 100;
  	bhdb.dlog[bhdb.loopid].BattCharge = addata; 		//  measured: 5V/3,3 = 1,63V value (Dev-R: 33k / 69k)
  	BHLOG(LOGADS) Serial.print((float)addata/1000, 2);
  	BHLOG(LOGADS) Serial.print("V - Battery=");

  	// Get battery Powerlevel & calculate % Level
	float x;              		// Volt calculation buffer
	addata=getespadc(Battery_pin) * 310 / 100;
  	x = ((float)(addata-BATTERY_MIN_LEVEL)/				//  measured: Vbatt/3 = 1,20V value (Dev-R: 33k / 69k)
       (float)(BATTERY_MAX_LEVEL-BATTERY_MIN_LEVEL) )* 100;
  	bhdb.dlog[bhdb.loopid].BattLevel = (int16_t) x;
  	bhdb.dlog[bhdb.loopid].BattLoad = (uint16_t) addata;

  	if(x==0){
    	sprintf(bhdb.dlog[bhdb.loopid].comment, "BattLow!");
    // ToDO: set Bat Low Event here...
  	}

  	BHLOG(LOGADS) Serial.printf("%.2fV (%i%%)\n", (float)addata/1000, bhdb.dlog[bhdb.loopid].BattLevel);

//***************************************************************
// save all collected sensor data to SD and/or report via LoRa/Wifi
	Logdata();

//***************************************************************
// Update ePaper
#ifdef EPD_CONFIG
    BHLOG(LOGEPD) Serial.println("  Loop: Show Sensor Data on EPD");
#ifdef BEACON
    showbeacon(bhdb.loopid);
#else
	if(bhdb.hwconfig & HC_EPD) {	// EPD access enabled by PCFG
		showdata(bhdb.loopid);
	}
#endif
#endif

// end of sensor loop
  digitalWrite(LED_RED, HIGH);	// show end of Loop phase

//***************************************************************
// Calculate next loop Index
  bhdb.loopid++;     // Increment LoopID for next loop
  if (bhdb.loopid == datasetsize){  // Max. numbers of datarows filled ?
    bhdb.loopid = 0;  // reset datarow idx -> round robin buffer for 1 day only
    bhdb.laps++;      // remember how many times we had a bhdb bufferoverflow.
  }

//***************************************************************
// End of Main Loop ->  Save data and enter Sleep/Delay Mode
	ReEntry = SLEEPMODE;	// initial startup sleep mode;
					// =1 after deep sleep; =2 after light sleep; =3 ModemSleep Mode; =4 Active Wait Loop
  // Start sleep/wait loop
	prepare_sleep_mode(ReEntry, (uint32_t) report_interval); // intervall in seconds

} // end of loop()



//*********************************************************************************
///@brief Logdata() Append current sensor data set to SD card -> logdata file
// and send it via LoRaWAN
//
///@param global bhdb
//***********************************************************************************
void Logdata(void) {
uint16_t sample;
String  dataMessage; 		// Global data objects
biot_dsensor_t	dsensor;	// sensor data stream pkg in binary format


  	sample = (bhdb.laps*datasetsize) + bhdb.loopid;

#ifdef DSENSOR2
  	dsensor.logid		= sample;
  	dsensor.year2k		= bhdb.stime.tm_year - 100;	// rebase 1900 -> 2000
	dsensor.month		= bhdb.stime.tm_mon+1;		// 1-12
	dsensor.day			= bhdb.stime.tm_mday;		// 1-31
	dsensor.hh			= bhdb.stime.tm_hour;
	dsensor.mm			= bhdb.stime.tm_min;
	dsensor.ss			= bhdb.stime.tm_sec;
	dsensor.weight		= bhdb.dlog[bhdb.loopid].HiveWeight * 100.0;	// in 10 Gramm steps; save 1 digit
	dsensor.text		= bhdb.dlog[bhdb.loopid].TempExtern * 100.0;
	dsensor.tint		= bhdb.dlog[bhdb.loopid].TempIntern * 100.0;
	dsensor.thive		= bhdb.dlog[bhdb.loopid].TempHive * 100.0;
	dsensor.trtc		= bhdb.dlog[bhdb.loopid].TempRTC * 100.0;
	dsensor.board3v		= bhdb.dlog[bhdb.loopid].ESP3V;
	dsensor.board5v 	= bhdb.dlog[bhdb.loopid].Board5V;
	dsensor.battcharge	= bhdb.dlog[bhdb.loopid].BattCharge;
	dsensor.battload	= bhdb.dlog[bhdb.loopid].BattLoad;
	dsensor.battlevel	= bhdb.dlog[bhdb.loopid].BattLevel;

	dsensor.tlen = snprintf((char*) dsensor.notice, BIoT_NOTICELEN, "%s", (char*) bhdb.dlog[bhdb.loopid].comment);
	if(dsensor.tlen > BIoT_NOTICELEN){
		dsensor.tlen = BIoT_NOTICELEN;
	}
	if(dsensor.tlen < 0){
		dsensor.tlen = 0;
	}

	dsensor.crc8	=0x00;	//t.b.d -> CRC8 calculation

#ifndef BEACON
size_t dslen = BIoT_DSENSORLEN - BIoT_NOTICELEN + dsensor.tlen;
  // Write the sensor readings onto the SD card
  if(issdcard){
	  if(bhdb.hwconfig & HC_SDCARD) {	// SDCard acces enabled by PCFG
    	appendBinFile(SD, SDLOGPATH, (const uint8_t*) &dsensor, dslen);
	  }
  }else{
    BHLOG(LOGSD) Serial.println("  Log: No SDCard, no local Logfile...");
  }
#endif	// BEACON

#else
// Create Status Report based on the sensor readings
  dataMessage =
              String(bhdb.date) + " " +
              String(bhdb.time) + "," +
              String(bhdb.dlog[bhdb.loopid].HiveWeight) + "," +
              String(bhdb.dlog[bhdb.loopid].TempExtern) + "," +
              String(bhdb.dlog[bhdb.loopid].TempIntern) + "," +
              String(bhdb.dlog[bhdb.loopid].TempHive)   + "," +
              String(bhdb.dlog[bhdb.loopid].TempRTC)    + "," +
              String((float)bhdb.dlog[bhdb.loopid].ESP3V/1000)      + "," +
              String((float)bhdb.dlog[bhdb.loopid].Board5V/1000)    + "," +
              String((float)bhdb.dlog[bhdb.loopid].BattCharge/1000) + "," +
              String((float)bhdb.dlog[bhdb.loopid].BattLoad/1000)   + "," +
              String(bhdb.dlog[bhdb.loopid].BattLevel)  + "#" +
              String(sample) + " " +
              String(bhdb.dlog[bhdb.loopid].comment) +
              "\r\n";       // OS common EOL: 0D0A
#ifndef BEACON
  Serial.printf("  Loop[%i]: ", sample);
  Serial.print(dataMessage);

  // Write the sensor readings onto the SD card
  if(issdcard){
 	  if(bhdb.hwconfig & HC_SDCARD) {	// SDCard acces enabled by PCFG
	    appendFile(SD, SDLOGPATH, dataMessage.c_str());
	   }
  }else{
    BHLOG(LOGSD) Serial.println("  Log: No SDCard, no local Logfile...");
  }
#endif	// BEACON
#endif	// DSENSOR2

#ifndef BEACON
#endif	// BEACON



  // Send Sensor report via BeeIoT-LoRa ...
  if(islora){  // do we have an active connection (joined ?)
#ifdef BEACON
    // For Test purpose of transmission quality: send a beacon to the current GW
    BeeIoTBeacon(0);  // in Non-Joined Mode != BIOT_JOIN (assumed LoRa Log was successfull)
#else

#ifdef DMSG
    LoRaLog((const byte *) dataMessage.c_str(), (byte)dataMessage.length(), 0); // in sync mode
#else
    LoRaLog((const byte *) &dsensor, dslen, 0); // in sync mode
#endif // DMSG

#endif // BEACON

  }else{
    BHLOG(LOGLORAW) Serial.println("  Log: No LoRa, no BeeIoTWAN on air ...");
  }

  return;
}

//*******************************************************************
/// @brief Simple Wait - Busy loop method
/// @param tval 	waittime in millisec
/// @param Getdata	Flag from GPIO35-BlueKey-ISR routine =1 -> stop busy loop
/// @details
///		250ms busy loop: lets blink Red LED each 0,5sec.
/// @return void
//*******************************************************************
void mydelay(int32_t tval){
  int fblink = tval / 1000;   // get # of seconds == blink frequence
  int i;
  for (i=0; i < fblink/2; i++){
    digitalWrite(LED_RED, LOW);
//      if(iswifi == 0){
//        CheckWebPage();
//      }
    mydelay2(250,0);  // wait 0.25 second
    digitalWrite(LED_RED, HIGH);
//      if(iswifi == 0){
//        CheckWebPage();
//      }
    mydelay2(2000,0);  // wait 2 second
	if(GetData){  // Semaphor controlled by GPIO35 Key (blue button)
		// user wants next measurement loop
		GetData = 0;	// reset loop trigger flag
		return;			// and start next measurement loop
	}
  } // loop
}

//*******************************************************************
/// @brief Simple Wait - by light sleep method: MM keeps active
/// @param waitms 	waittime in millisec
/// @param initdelay gracetime for trigger timer initiaöization in msec.
/// @details
/// 	ESP32 to enter light sleep mode
/// 	GPIO35-BlueKey configured as async wakup trigger
/// @return void
//*******************************************************************
esp_err_t mydelay2(int32_t waitms, int32_t initdelay){
#define uS_TO_mS_FACTOR 1000LL  /* Conversion factor for micro seconds to milli seconds */
esp_err_t rc;

	// BHLOG(LOGBH) Serial.printf("  Main-Dly2: Light Sleep - Trigger: Timer(%i ms) + GPIO%d(blue Key4)\n", waittime, EPD_KEY4);
	gpio_wakeup_enable(EPD_KEY4, GPIO_INTR_LOW_LEVEL);	// set GPIO35 (blue key4 button) as trigger in low level
	esp_sleep_enable_gpio_wakeup();

	// Configure the wake up timer source
	rc=esp_sleep_enable_timer_wakeup(uint64_t (waitms) * uS_TO_mS_FACTOR);	// time in us
	if(rc != ESP_OK){
		BHLOG(LOGBH) Serial.printf("  Main-Dly2: LightSleep timer setup failed: %i\n", rc);
		return(rc);
	}else{
		//	delay(initdelay); 					// set gracetime for timer activation
	}
	rc = esp_light_sleep_start();

	if(rc != ESP_OK){
		BHLOG(LOGBH) Serial.printf("  Main-Dly2: LightSleep failed: %i\n", rc);
		delay(5000);	// wait some time to show the message
		// ToDo: what to do i this error case ???
	}
	return(rc);
}


//*******************************************************************
/// @brief initialize static configuration settings of housekeeping data
/// @param reentry 0..4 wakeup mode
/// @details
///		=0 initial startup needed(after reset)
/// 	=1 after deep sleep /Ram destroyed, except RTC Mem)
/// 	=2 after light sleep (Ram up to date)
///		=3 ModemSleep Mode (not used)
///		=4 Active Wait Loop using delay()
/// @return void
//*******************************************************************
void InitConfig(int reentry){
  int i;

	if(!reentry){ // do init only once afetr Power Reset
		bhdb.loopid       = 0;
		bhdb.laps         = 0;
		bhdb.formattedDate[0] = 0;
		bhdb.date[0]      = 0;
		bhdb.time[0]      = 0;
		bhdb.ipaddr[0]    = 0;
		bhdb.chcfgid	  = 0;
		bhdb.woffset	  = -scale_OFFSET;

	// Enable HW components flags	<- may get overwritten by pcfg.hwconfig at each JOIN
		bhdb.hwconfig	  = 0;
#ifdef LORA_CONFIG
		bhdb.hwconfig	  += HC_LORA; 	// LoRa is minimum unless pcfg is needed for remote control
#endif
#ifdef EPD_CONFIG
		bhdb.hwconfig	  += HC_EPD;
#endif
#ifdef SD_CONFIG
// can be actively switched on by HWconfig RX1 command later, but not now
		bhdb.hwconfig	  += HC_SDCARD;
#endif
#ifdef WIFI_CONFIG
		bhdb.hwconfig	  += HC_WIFI;
#endif
#ifdef NTP_CONFIG
		bhdb.hwconfig	  += HC_NTP;
#endif
#ifdef BEACON
		bhdb.hwconfig	  += HC_BEACON;
#endif

		// bhdb.BoardID      = 0;  already defined
		for(i=0; i<datasetsize;i++){
			bhdb.dlog[i].index       =0;
			bhdb.dlog[i].timeStamp[0]=0;
			bhdb.dlog[i].HiveWeight  =0;
			bhdb.dlog[i].TempExtern  =0;
			bhdb.dlog[i].TempIntern  =0;
			bhdb.dlog[i].TempHive    =0;
			bhdb.dlog[i].TempRTC     =0;
			bhdb.dlog[i].ESP3V       =0;
			bhdb.dlog[i].Board5V     =0;
			bhdb.dlog[i].BattCharge  =0;
			bhdb.dlog[i].BattLoad    =0;
			bhdb.dlog[i].BattLevel   =0;
			strncpy(bhdb.dlog[i].comment, "OK/0", 3);
		}
	} // end of !reentry
} // end of InitConfig()




//*******************************************************************
/// @brief biot_ioshutdown()
/// disable all hi level IO protocol devices (e.g. SPI)
/// and prepare IO ports for sleep mode accordingly,
/// Be aware only GPIOs with RTC functionality can be stabilzated in
/// a configured mode: 0,2,4,12-15,25-27,32-39
/// @param sleepmode	wakeup mode
/// @details 1 DeepSleep Mode; 2 LightSleep Mode; 3 ModemSleep; 4 Active wait loop
/// @return void
//*******************************************************************
void biot_ioshutdown(int sleepmode){
 if(sleepmode == 1){    // in deep sleep we have to stabilize CS+RST lines of SPI devices
    BHLOG(LOGSPI) Serial.println("  MAIN: shutdown IO devices");

    // backup any needed memory values at wakeup here
    //			esp_bluedroid_disable();
    //			esp_bt_controller_disable();

#ifdef WIFI_CONFIG
    if(iswifi){
		adc_power_off()
		Wifi.disconnect(true);
	//	esp_wifi_stop();
  		WiFi.disconnect(true);	// disconnect curr. session
  		WiFi.mode(WIFI_STA); // switch WIFI off
  	}
    iswifi = 0;
#endif
#ifdef NTP_CONFIG
    isntp = 0;
#endif

#ifdef SD_CONFIG
    if(issdcard){
      SD.end();   // unmount SD card
    }
#endif
	pinMode(SD_CS, INPUT_PULLUP);		// xxx, bootstrap pin !
    gpio_hold_en(SD_CS);      // stable state in Deep sleep
    issdcard = 0;

#ifdef EPD_CONFIG
    if(isepd){
      display.powerDown();
    }
#endif

// SPI Bus shutdown: EPD + LORA + SD
    pinMode(VSPI_MISO, INPUT);	// needs ext- Pullup for DeepSleep -> no RTC GPIO
    pinMode(VSPI_MOSI, INPUT);	// needs ext- Pullup for DeepSleep -> no RTC GPIO
    pinMode(VSPI_SCK, INPUT);	// needs ext- Pullup for DeepSleep -> no RTC GPIO

    isepd = 0;
	pinMode(EPD_BUSY, INPUT);	// already output by EPD
	pinMode(EPD_CS, INPUT);		// needs ext- Pullup for DeepSleep -> no RTC GPIO, bootstrap pin
	pinMode(EPD_RST, INPUT);	// needs ext- Pullup for DeepSleep -> no RTC GPIO
	pinMode(EPD_DC, INPUT); 	// needs ext- Pullup for DeepSleep -> no RTC GPIO
    gpio_hold_en(EPD_CS);    	// EPD_CS
    gpio_hold_en(EPD_RST);   	// EPD_RST
    gpio_hold_en(EPD_DC);    	// EPD_DC

// High side power switch of SPI device has no effect
// -> need low side switch by driving ext. MOSFET by GPIO
	pinMode(EPD_LOWSW, OUTPUT);			// Open EPD Low side switch -> no ground to ePaper
    digitalWrite(EPD_LOWSW, HIGH);		// High if P-channel MOSFET
    gpio_hold_en(EPD_LOWSW);


#ifdef LORA_CONFIG
    if(islora){
      LoRa.end();     // set LORA Radio to sleep mode and disable SPI
    }
#endif
    islora = 0;
	pinMode(BEE_CS, INPUT_PULLUP);		// bootstrap pin
	pinMode(BEE_RST, INPUT_PULLUP);
    gpio_hold_en(BEE_CS);     // BEE_CS
    gpio_hold_en(BEE_RST);    // BEE_RST

#ifdef HX711_CONFIG
// HX requires OUTPUT here to define data/clock line during sleep
    pinMode(HX711_SCK, INPUT_PULLUP);
    pinMode(HX711_DT, INPUT_PULLUP);
    gpio_hold_en(HX711_SCK);  // HX711 SCK
    gpio_hold_en(HX711_DT);   // HX711 Data
#endif


//	i2c_driver_delete(i2c_master_port);
    // Set all I2C lines to high impedance -> open collector bus
    pinMode(I2C_SCL, INPUT);		// /w ext- pullup 4k7, no RTC GPIO
    pinMode(I2C_SDA, INPUT);		// /w ext- pullup 4k7, no RTC GPIO
    gpio_hold_en((gpio_num_t) I2C_SCL);    // ADS_SCL
    gpio_hold_en((gpio_num_t) I2C_SDA);    // ADS_SDA

#ifdef ONEWIRE_CONFIG
// Set OW line to high impedance -> open collector bus
//    pinMode(ONE_WIRE_BUS, INPUT_PULLUP);	// finally with ex. pullup 10k -> set to RTC INPUT
//    gpio_hold_en(ONE_WIRE_BUS); 	// OneWire Bus line
#endif

    pinMode(LED_RED, INPUT_PULLUP); 		// finally pullued up by LED, RTC GPIO, bootstrap pin
    gpio_hold_en(LED_RED); 			// OneWire Bus line

  } // end of sleepmode
} // biot_ioshutdown()


//***********************************************************************
/// @brief Method to print the reason by which ESP32
/// has been awaken from sleep
/// @param Mode	1=DeepSleep Mode; 2=LightSleep Mode;
/// 		3=ModemSleep;
/// 		4=Active wait loop sleeptime -> loop time - value in seconds
/// @param waittime sleep/wait time in seconds
/// @return void
//***********************************************************************
void prepare_sleep_mode(int mode, uint64_t waittime){
esp_err_t  rc;

	switch(mode){
		case 1:		// DeepSleepMode
			biot_ioshutdown(mode);          // disable all IO devices and their IO Ports.

			// Next we decide what all peripherals to shut down/keep on.
			//	By default, ESP32 will automatically power down the peripherals
			//	not needed by the wakeup source,
    		//  Details at the API docs
			//	http://esp-idf.readthedocs.io/en/latest/api-reference/system/deep_sleep.html

      		//	BHLOG(LOGBH) Serial.println("  Main: Configure all RTC Peripherals to be powered");
    		// Keep power domain enabled in deep sleep, if it is needed by one of the wakeup options.
      		// Otherwise power it down.
    		esp_sleep_pd_config(ESP_PD_DOMAIN_RTC_PERIPH, ESP_PD_OPTION_AUTO);
			gpio_pullup_en(EPD_KEY4);                  // use RTC_IO pullup on GPIO 35
    		gpio_pulldown_dis(EPD_KEY4);               // not use pulldown on GPIO 35
			rc = esp_sleep_enable_ext0_wakeup(EPD_KEY4, 0);	// select GPIO35 (blue button) as Wakup Trigger on low level
    		BHLOG(LOGBH) Serial.printf("  Main: Deep Sleep - Trigger: Timer(%i sec.) + GPIO%d(blue Key4)\n", (uint32_t)waittime, EPD_KEY4);
			if(rc != ESP_OK){
				BHLOG(LOGBH) Serial.printf("  Main: DeepSleep timer setup failed: %i\n", rc);
			}else{
				//	delay(initdelay); 					// set gracetime for timer activation
			}

    		gpio_deep_sleep_hold_en();  // freeze all settings from above during deep sleep time
    		// reactivation after deep sleep in setup_spi_VSPI() -> gpio_hold_dis() needed

			// Now that we have setup a wake cause and if needed setup the peripherals state in deep sleep,
			// we can now start going to deep sleep. In the case that no wake up sources were provided but
			// deep sleep was started, it will sleep forever unless hardware reset occurs.
			esp_deep_sleep((uint64_t) waittime * uS_TO_S_FACTOR);	// start sleep with RTC time trigger: no return from here

			BHLOG(LOGBH) Serial.println("  Main: This should never be printed");
			break;

		case 2:		// LightSleepMode
			BHLOG(LOGBH) Serial.printf("  Main: Light Sleep - Trigger: Timer(%i sec.) + GPIO%d(blue Key4)\n", (uint32_t)waittime, EPD_KEY4);
			gpio_wakeup_enable(EPD_KEY4, GPIO_INTR_LOW_LEVEL);	// set GPIO35 (blue key4 button) as trigger in low level
			esp_sleep_enable_gpio_wakeup();		// enable wakeup feature of selected GPIO wakeup resource

			// Configure the wake up timer source
			rc = esp_sleep_enable_timer_wakeup((uint64_t)waittime * uS_TO_S_FACTOR);	// time in us
			if(rc != ESP_OK){
				BHLOG(LOGBH) Serial.printf("  Main: LightSleep timer setup failed: %i\n", rc);
			}else{
				//	delay(initdelay); 					// set gracetime for timer activation
			}

			rc = esp_light_sleep_start();
			if(rc != ESP_OK){
				BHLOG(LOGBH) Serial.printf("  Main: LightSleep failed: %i\n", rc);
				delay(5000);	// wait some time to show the message
				// ToDo: what to do i this error case ???
			}

			// BHLOG(LOGBH) Serial.println("  Main: Continue from LightSleep...");
			break;

		case 3:		// ModemSleepMode
			// ESP32 can enter modem sleep mode only when it connects to the router in station mode.
			// ESP32 stays connected to the router through the DTIM beacon mechanism
			// NOP
			break;

		case 4:		// Active Mode
			// NOP
			break;

		default:
#ifndef BEACON
	    	BHLOG(LOGBH) Serial.printf("  Loop: Enter WaitLoop (%i sec.)\n", report_interval);
#endif
			mydelay(waittime*1000);   // time in ms - wait with blinking red LED
			BHLOG(LOGBH) Serial.println();
			break;
	} // switch

}


//***********************************************************************
/// @brief Method to print the reason by which ESP32
/// has been awaken from sleep
/// @param none
/// @return esp_sleep_wakeup_cause_t wakeup_reason
//***********************************************************************
esp_sleep_wakeup_cause_t print_wakeup_reason(){
	esp_sleep_wakeup_cause_t wakeup_reason;

	wakeup_reason = esp_sleep_get_wakeup_cause();

	switch(wakeup_reason)  {
		case ESP_SLEEP_WAKEUP_EXT0:       BHLOG(LOGBH)Serial.println("Wakeup caused by external signal using RTC_IO"); break;
		case ESP_SLEEP_WAKEUP_EXT1:       BHLOG(LOGBH)Serial.println("Wakeup caused by external signal using RTC_CNTL"); break;
		case ESP_SLEEP_WAKEUP_TIMER:      BHLOG(LOGBH)Serial.println("Wakeup caused by timer"); break;
		case ESP_SLEEP_WAKEUP_TOUCHPAD:   BHLOG(LOGBH)Serial.println("Wakeup caused by touchpad"); break;
		case ESP_SLEEP_WAKEUP_ULP:        BHLOG(LOGBH)Serial.println("Wakeup caused by ULP program"); break;
		case ESP_SLEEP_WAKEUP_GPIO:       BHLOG(LOGBH)Serial.println("Wakeup caused by GPIO"); break;
		case ESP_SLEEP_WAKEUP_UART:       BHLOG(LOGBH)Serial.println("Wakeup caused by UART (light sleep only)"); break;
		case ESP_SLEEP_WAKEUP_ALL:        BHLOG(LOGBH)Serial.println("Not a wakeup cause: used to disable all wakeup sources with esp_sleep_disable_wakeup_source"); break;
		case ESP_SLEEP_WAKEUP_UNDEFINED:  BHLOG(LOGBH)Serial.println("Reset or unknown WakeUp cause"); break;
		default :
			BHLOG(LOGBH)Serial.printf("Sleep>Wakeup root cause: %d unknown\n",wakeup_reason);
			return(ESP_SLEEP_WAKEUP_UNDEFINED);
	}
	return(wakeup_reason);
}


//*******************************************************************
// getChipRevision()
/// @brief Read eFuse bitfield block 3 and extract chip identification IDs
/// Global used:
///  bhdb.BoardID  unique Identifier (=MAC) of MCU board (use only lower 6By. (of8)
///  bhdb.Chipid   get chiptype: 0=WROOM32, 1=WROVER-B, ...
///  bhdb.ChipType get chip board type and revision -> relevant for sytem API vaildation
/// @param none
/// @return Chip ID from eFUse bitfield block 3
//*******************************************************************
int getChipRevision(){
  return ((REG_READ(EFUSE_BLK0_RDATA3_REG) >> (EFUSE_RD_CHIP_VER_REV1_S)) & EFUSE_RD_CHIP_VER_REV1_V);
}

//*******************************************************************
/// @brief Read eFuse bitfiels block 3 and extract chipt ID package version
/// @return ChipIdPkgVer - chip ID package version
//*******************************************************************
int getChipVerPkg(){
  //  Serial.print(REG_READ(EFUSE_BLK0_RDATA3_REG),BIN);
  return ((REG_READ(EFUSE_BLK0_RDATA3_REG) >> (EFUSE_RD_CHIP_VER_PKG_S)) & EFUSE_RD_CHIP_VER_PKG_V);
}

//*******************************************************************
/// @brief Read eFuse bitfiels block 3 using ESP.getEfuseMAC() and
/// print formatted values as one line
/// @param	global: update bhdb-struct by detected values of eFUse field
/// @return version
//*******************************************************************
void get_efuse_ident(void) {

	bhdb.BoardID = ESP.getEfuseMac();//The chip ID is essentially its MAC address(length: 6 bytes).
	Serial.printf("  Setup: ESP32 BoardID = %04X",(uint16_t)(bhdb.BoardID>>32)); //print High 2 bytes
	Serial.printf("%08X\n",(uint32_t)bhdb.BoardID);  //print Low 4bytes.

	esp_chip_info(&bhdb.chipTYPE);
	Serial.printf("  Setup: Detected ESP32-S-Model:%d, Rev: %i ", bhdb.chipTYPE.model, bhdb.chipTYPE.revision);
	Serial.printf("  %s\n", esp_get_idf_version());
	Serial.printf("  Setup: Chip Revision: %d -", getChipRevision());

	bhdb.chipID = getChipVerPkg();
  	Serial.printf("-  Chip-Package ID: %d  ", bhdb.chipID);

  switch(bhdb.chipID){
		case EFUSE_RD_CHIP_VER_PKG_ESP32D0WDQ6:	Serial.println("-> ESP32D0WDQ6 (WROOM32)"); break;
		case EFUSE_RD_CHIP_VER_PKG_ESP32D0WDQ5:	Serial.println("-> ESP32D0WDQ5 (WROVER-B)"); break;
		case EFUSE_RD_CHIP_VER_PKG_ESP32D2WDQ5:	Serial.println("-> ESP32D2WDQ5"); break;
		case EFUSE_RD_CHIP_VER_PKG_ESP32PICOD2:	Serial.println("-> ESP32PICOD2"); break;
		case EFUSE_RD_CHIP_VER_PKG_ESP32PICOD4:	Serial.println("-> ESP32PICOD4"); break;
		default: 	Serial.println("-> unknown"); break;
	}

  //	Serial.println(esp_efuse_get_pkg_ver(), BIN);
}


//*******************************************************************
/// @brief Reset Node
/// @brief - Reset statistic counter
/// @brief - clear SD
/// @brief - initiate JOIN for new cfg. data
/// @return void	But GW expects JOIN request  on defjoin channel
//*******************************************************************
void ResetNode(uint8_t level, uint8_t sdlevel, uint8_t p3){
	// Reset SD Card: P1=1: LogFile, P1=2: Directory
	sd_reset(sdlevel);
	ESP.restart();	// Reset ESP /wo Reentry reason
}





//********************************************************************************
// wiretest()
/// @brief For test purpose only in case of HW incompatibility
/// Check for WROOM <-> Wrover ESP32 pin layout
/// @return void
//********************************************************************************
void wiretest(){
  int gpio = 36;
  int twait = 1000;

  Serial.printf(" GPIO OUT: %i: ", gpio);
  for (int i=0; i<10000; i++){
    pinMode(gpio,   OUTPUT);
    digitalWrite(gpio, LOW);
    mydelay2(twait,20);
    digitalWrite(gpio, HIGH);
    mydelay2(twait,20);
    Serial.printf(".");
  }
  Serial.printf("\n");

  Serial.printf(" GPIO IN: %i: ", gpio);
  pinMode(gpio,  INPUT);
  for (int i=0; i<20; i++){
    int dio = digitalRead(gpio);
    mydelay2(twait/2,20);
    if(dio)
      Serial.printf("1");
    else
      Serial.printf("0");
  }
  Serial.printf("   -> Done! \n");
  while(1);
}


// end of BeeIoT main